<?php
/**
 * @file
 * Code for the DrupalCamp Belgium General feature.
 */

include_once 'drupalcamp_general.features.inc';
/**
 * @file
 * General drupalcamp functionality.
 */

/* ************************************ *
 * ******* HOOK IMPLEMENTATIONS ******* *
 * ************************************ */


/* ************************************ *
 * *********** HOOK ALTERS ************ *
 * ************************************ */

/**
 * Implements hook_menu_alter().
 */
function drupalcamp_general_menu_alter(&$items) {
  $items['node']['access callback'] = FALSE;
  $items['user/register']['title'] = 'Register';
  $items['user/%user/tickets']['access callback'] = FALSE;
  $items['user/%user/edit']['title'] = t('Edit Your Details');
  $items['user/%/sessions']['access callback'] = '_drupalcamp_general_user_sessions_access';
}

/**
 * Implements hook_menu().
 */
function drupalcamp_general_menu() {
  $items['user/%user/logout'] = array(
    'title' => 'Logout',
    'access callback' => 'user_is_logged_in',
    'page callback' => 'drupalcamp_general_exec_logout',
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
  );

  return $items;
}

/**
 * Implements hook_module_implements_alter().
 */
function drupalcamp_general_module_implements_alter(&$implementations, $hook) {
  // When the implementations of hook_menu_alter are called, we need our module
  // to be called after views, so let's remove it from the implementations then
  // add it to the end.
  if ($hook == 'menu_alter') {
    if (isset($implementations['drupalcamp_general'])) {
      $my_implementation = $implementations['drupalcamp_general'];
      unset($implementations['drupalcamp_general']);
      $implementations['drupalcamp_general'] = $my_implementation;
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function drupalcamp_general_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    case 'user_register_form':
    case 'user_profile_form':
      $form['og_user_node']['#access'] = FALSE;
      if (arg(2) === 'edit') {
        drupal_set_title(t('Edit your profile'));
        $form['actions']['submit']['#value'] = t('Edit your profile');
      }
      else {
        drupal_set_title(t('Register'));
        $form['actions']['submit']['#value'] = t('Register for DrupalCamp');
      }
      break;
  }
}

/**
 * Implements hook_block_info().
 */
function drupalcamp_general_block_info() {
  $blocks['footer_text'] = array(
    'info' => t('Footer text with social links and credits.'),
  );

  return $blocks;
}

/**
 * Implements hook_block_configure().
 */
function drupalcamp_general_block_configure($delta = '') {
  $callback = _drupalcamp_general_block_callback($delta, 'configure');
  if ($callback) {
    return $callback();
  }
}

/**
 * Implements hook_block_save().
 */
function drupalcamp_general_block_save($delta = '', $edit = array()) {
  $callback = _drupalcamp_general_block_callback($delta, 'save');
  if ($callback) {
    return $callback($edit);
  }
}

/**
 * Implements hook_block_view().
 */
function drupalcamp_general_block_view($delta = '') {
  $callback = _drupalcamp_general_block_callback($delta, 'view');
  if ($callback) {
    return $callback();
  }
}

/**
 * Helper to include the blocks include and to create the proper callback.
 *
 * @param string $delta
 *   The delta of the block.
 * @param string $type
 *   The block hook name (configure, save, view).
 *
 * @return FALSE|string
 *   The callback name will only be returned if it exists.
 */
function _drupalcamp_general_block_callback($delta, $type) {
  module_load_include(
    'inc',
    'drupalcamp_general',
    'drupalcamp_general.blocks'
  );

  $callback = '_drupalcamp_general_' . $delta . '_' . $type;
  if (!function_exists($callback)) {
    return FALSE;
  }

  return $callback;
}

/* ************************************ *
 * ********* ACCESS CALLBACKS ********* *
 * ************************************ */

/**
 * Custom access callback to hide user/sessions tab if user has no sessions.
 *
 * @return bool
 *   TRUE if the user has sessions (and thus access).
 */
function _drupalcamp_general_user_sessions_access() {
  $uid = arg(1);
  global $user;

  if (!is_numeric($uid)
    || ($user->uid != $uid) && !user_access('administer content')
  ) {
    return FALSE;
  }

  // Check if user has sessions.
  $sql = db_select('node', 'n');

  $sql->addField('n', 'nid');
  $sql->innerJoin(
    'field_data_field_speakers', 's', 'n.nid = s.entity_id'
  );
  $sql->condition('n.type', 'session', '=');
  $sql->condition('s.field_speakers_target_id', $uid, '=');

  $res = $sql->execute();

  $num = $res->rowCount();

  if ($num > 0) {
    return TRUE;
  }

  return FALSE;
}


/**
 * Execute user logout.
 */
function drupalcamp_general_exec_logout() {
  module_load_include('inc', 'user', 'user.pages');
  user_logout();
}
